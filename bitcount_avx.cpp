//
// Created by bogdan on 12/04/24.
//
#include <iomanip>
#include <iostream>
#include <immintrin.h>
#include <bitset>
#include <vector>
#include <algorithm>

float genRandFloat(){
    return rand()/float(RAND_MAX); // outputs 0..1 values
//    return rand()/float(RAND_MAX)*24.f+1.f
}

int main() {

    int maskArray[32][8]{{1,    1,    1,    1,    1,    1,    1,    1,},
                         {2,    2,    2,    2,    2,    2,    2,    2,},
                         {4,    4,    4,    4,    4,    4,    4,    4,},
                         {8,    8,    8,    8,    8,    8,    8,    8,},
                         {16,   16,   16,   16,   16,   16,   16,   16,},
                         {32,   32,   32,   32,   32,   32,   32,   32,},
                         {64,   64,   64,   64,   64,   64,   64,   64,},
                         {128,  128,  128,  128,  128,  128,  128,  128,},
                         {256,  256,  256,  256,  256,  256,  256,  256,},
                         {512,  512,  512,  512,  512,  512,  512,  512,},
                         {1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,},
                         {2048,2048,2048,2048,2048,2048,2048,2048,},
                         {4096,4096,4096,4096,4096,4096,4096,4096,},
                         {8192,8192,8192,8192,8192,8192,8192,8192,},
                         {16384,16384,16384,16384,16384,16384,16384,16384,},
                         {32768,32768,32768,32768,32768,32768,32768,32768,},
                         {65536,65536,65536,65536,65536,65536,65536,65536,},
                         {131072,131072,131072,131072,131072,131072,131072,131072,},
                         {262144,262144,262144,262144,262144,262144,262144,262144,},
                         {524288,524288,524288,524288,524288,524288,524288,524288,},
                         {1048576,1048576,1048576,1048576,1048576,1048576,1048576,1048576,},
                         {2097152,2097152,2097152,2097152,2097152,2097152,2097152,2097152,},
                         {4194304,4194304,4194304,4194304,4194304,4194304,4194304,4194304,},
                         {8388608,8388608,8388608,8388608,8388608,8388608,8388608,8388608,},
                         {16777216,16777216,16777216,16777216,16777216,16777216,16777216,16777216,},
                         {33554432,33554432,33554432,33554432,33554432,33554432,33554432,33554432,},
                         {67108864,67108864,67108864,67108864,67108864,67108864,67108864,67108864,},
                         {134217728,134217728,134217728,134217728,134217728,134217728,134217728,134217728,},
                         {268435456,268435456,268435456,268435456,268435456,268435456,268435456,268435456,},
                         {536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,},
                         {1073741824,1073741824,1073741824,1073741824,1073741824,1073741824,1073741824,1073741824,},
                         {-2147483648,-2147483648,-2147483648,-2147483648,-2147483648,-2147483648,-2147483648,-2147483648,},};


//    float a[15]{0.9274405,0.5442584,0.43579006,0.54717463,0.29385483,0.9274405,0.5442584,0.43579006,
//                0.9274405,0.5442584,0.43579006,0.54717463,0.29385483,0.9274405,0.5442584};
//    float a[8] = {0.9274405,0.5442584,0.43579006,0.54717463,0.29385483, 0.9274405,0.5442584,0.43579006};

//    std::vector<float>a{0.9274405,0.5442584,0.43579006,0.54717463,0.29385483,0.9274405,0.5442584,0.43579006,
//                          0.9274405,0.5442584,0.43579006,0.54717463,0.29385483,0.9274405,0.5442584};

    std::vector<float>a(1000);
    std::generate(a.begin(), a.end(), genRandFloat);

    int c[8];

//    for (float & i : a){
//        std::cout << std::setw(8)<< i << ": "<< std::bitset<32>(*reinterpret_cast<int*>(&i)) << '\n';
//    }

    int C[32][4] {};

    std::cout << "total size of vector is " << a.size() <<". Aligned size for AVX is " << a.size() - a.size() % 7 << '\n';

 // total = size - (size mod 7)
    for (int j = 1; j <= (a.size() - a.size() % 7); j+=7){
//        std::cout << "Printing batches of values to be loaded to AVX registers\n";
//        for (int i = 0; i<8; i++){
//            std::cout << a[j - 1 + i] << ' ';
////            std::cout << std::setw(8)<< i << ": "<< std::bitset<32>(*reinterpret_cast<int*>(&i)) << '\n';
//        }
//        std::cout << '\n';


                  __m256 a8 = _mm256_loadu_ps(&a[j-1]);
        for (int i = 0; i < 32; ++i) {

            __m256i b8 = _mm256_loadu_si256((__m256i *) maskArray[i]); // masks
            __m256i c8 = _mm256_castps_si256(_mm256_and_ps(a8, _mm256_castsi256_ps(b8)));

            _mm256_storeu_si256((__m256i *) c, c8);

            C[i][(c[0]>0) + (c[1]>0) *2] += 1;
            C[i][(c[1]>0) + (c[2]>0) *2] += 1;
            C[i][(c[2]>0) + (c[3]>0) *2] += 1;
            C[i][(c[3]>0) + (c[4]>0) *2] += 1;
            C[i][(c[4]>0) + (c[5]>0) *2] += 1;
            C[i][(c[5]>0) + (c[6]>0) *2] += 1;
            C[i][(c[6]>0) + (c[7]>0) *2] += 1;

        }

    }
    std::cout << "Printing C (AVX)\n 00 01 10 11\n -----------\n";
    for(auto & bitPairs : C) {
        for(auto & pairCount:bitPairs) { std::cout << pairCount << ' '; }
        std::cout <<'\n';
    }
}