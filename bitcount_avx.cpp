//
// Created by bogdan on 12/04/24.
//
#include <stdio.h>
#include <iomanip>
#include <iostream>
#include <immintrin.h>
#include <bitset>

int main() {
//    int a[8] = {0, 2, 4, 6, 8, 10, 12, 14};
//    float a[8] = {0.1, 0.2, 0.3,0.4,0.5,0.6,0.7,0.8};
//    int b[8] = {1, 2, 4, 8, 16,  32,  64,  128};\

    int b[32][8]{{1,1,1,1,1,1,1,1,},
                 {2,2,2,2,2,2,2,2,},
                 {4,4,4,4,4,4,4,4,},
                 {8,8,8,8,8,8,8,8,},
                 {16,16,16,16,16,16,16,16,},
                 {32,32,32,32,32,32,32,32,},
                 {64,64,64,64,64,64,64,64,},
                 {128,128,128,128,128,128,128,128,},
                 {256,256,256,256,256,256,256,256,},
                 {512,512,512,512,512,512,512,512,},
                 {1024,1024,1024,1024,1024,1024,1024,1024,},
                 {2048,2048,2048,2048,2048,2048,2048,2048,},
                 {4096,4096,4096,4096,4096,4096,4096,4096,},
                 {8192,8192,8192,8192,8192,8192,8192,8192,},
                 {16384,16384,16384,16384,16384,16384,16384,16384,},
                 {32768,32768,32768,32768,32768,32768,32768,32768,},
                 {65536,65536,65536,65536,65536,65536,65536,65536,},
                 {131072,131072,131072,131072,131072,131072,131072,131072,},
                 {262144,262144,262144,262144,262144,262144,262144,262144,},
                 {524288,524288,524288,524288,524288,524288,524288,524288,},
                 {1048576,1048576,1048576,1048576,1048576,1048576,1048576,1048576,},
                 {2097152,2097152,2097152,2097152,2097152,2097152,2097152,2097152,},
                 {4194304,4194304,4194304,4194304,4194304,4194304,4194304,4194304,},
                 {8388608,8388608,8388608,8388608,8388608,8388608,8388608,8388608,},
                 {16777216,16777216,16777216,16777216,16777216,16777216,16777216,16777216,},
                 {33554432,33554432,33554432,33554432,33554432,33554432,33554432,33554432,},
                 {67108864,67108864,67108864,67108864,67108864,67108864,67108864,67108864,},
                 {134217728,134217728,134217728,134217728,134217728,134217728,134217728,134217728,},
                 {268435456,268435456,268435456,268435456,268435456,268435456,268435456,268435456,},
                 {536870912,536870912,536870912,536870912,536870912,536870912,536870912,536870912,},
                 {1073741824,1073741824,1073741824,1073741824,1073741824,1073741824,1073741824,1073741824,},
                 {-2147483648,-2147483648,-2147483648,-2147483648,-2147483648,-2147483648,-2147483648,-2147483648,},};

//    for(int i = 0; i< 32;++i){
//        std::cout << '{';
//        for (int j = 0; j<8;++j){
//            std::cout << *reinterpret_cast<float*>(&b[i][0]) << ",";
//        }
//        std::cout << "},\n";
//    }

    float a[8] = {0.9274405,0.5442584,0.43579006,0.54717463,0.29385483, 0.9274405,0.5442584,0.43579006};
//    int b[8][32] = {{1}, {2}, 2, 2, 4,  4,  8,  8};

    int c[8];

    int tmp {};
//    for (int i = 0; i<8;++i){
//////        int* int_a = reinterpret_cast<int*>(&a[i]); // 32 bits int
//////        std::cout << "a equals to " << int_a << '\n';
////////        tmp = *reinterpret_cast<int*>(&a[i]);
//////        std::cout << (tmp) << '\n';
//        std::cout << std::setw(4)<< a[i] << ": "<< std::bitset<32>(*reinterpret_cast<int*>(&a[i])) << '\n';
////
//////        std::cout << a[i] << ": "<<
//////        std::bitset<32>(*reinterpret_cast<int*>(&a[i])) << '\n';
////
//    }
//    std::cout << '\n';
//    for (int i = 0; i<8;++i){
////load in 8 copies of the same value and 8 masks, run "and" _mm256_and_ps
//        printf("%b ", b[i]);
//    }
    int C[32][4] {};

    __m256 a8 = _mm256_loadu_ps(a);
    for (int i = 0; i < 32; ++i) {

        __m256i b8 = _mm256_loadu_si256((__m256i *) b[i]); // masks
        __m256i c8 = _mm256_castps_si256(_mm256_and_ps(a8, _mm256_castsi256_ps(b8)));

        _mm256_storeu_si256((__m256i *) c, c8);

        C[i][c[0]>>i + (c[1]>>i) *2] += 1;
        C[i][c[1]>>i + (c[2]>>i) *2] += 1;
        C[i][c[3]>>i + (c[4]>>i) *2] += 1;
        C[i][c[5]>>i + (c[6]>>i) *2] += 1;
        C[i][c[7]>>i + (c[8]>>i) *2] += 1;

    }

    for(int i = 0;i<32;++i) {
        for (int j = 0; j < 4; ++j) {
            std::cout << C[i][j] << ' ';
        }
        std::cout <<'\n';
    }

    // What's faster? popcount, rightshift or >0 check
//    for(int i=0; i<8; i++){
//        std::cout << std::setw(4) << a[i] << " & " << b[i] << " " << std::bitset<32>(c[i]) << '\n';
//        }
    //output: 1 3 5 7 9 11 13 15
}